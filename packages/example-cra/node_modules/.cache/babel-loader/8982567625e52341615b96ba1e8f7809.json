{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createWeb3ReactStoreAndActions = exports.MAX_SAFE_CHAIN_ID = void 0;\n\nconst address_1 = require(\"@ethersproject/address\");\n\nconst zustand_1 = require(\"zustand\");\n/**\n * MAX_SAFE_CHAIN_ID is the upper bound limit on what will be accepted for `chainId`\n * `MAX_SAFE_CHAIN_ID = floor( ( 2**53 - 39 ) / 2 ) = 4503599627370476`\n *\n * @see {@link https://github.com/MetaMask/metamask-extension/blob/b6673731e2367e119a5fee9a454dd40bd4968948/shared/constants/network.js#L31}\n */\n\n\nexports.MAX_SAFE_CHAIN_ID = 4503599627370476;\n\nfunction validateChainId(chainId) {\n  if (!Number.isInteger(chainId) || chainId <= 0 || chainId > exports.MAX_SAFE_CHAIN_ID) {\n    throw new Error(`Invalid chainId ${chainId}`);\n  }\n}\n\nfunction validateAccount(account) {\n  return (0, address_1.getAddress)(account);\n}\n\nconst DEFAULT_STATE = {\n  chainId: undefined,\n  accounts: undefined,\n  activating: false\n};\n\nfunction createWeb3ReactStoreAndActions() {\n  const store = (0, zustand_1.createStore)()(() => DEFAULT_STATE); // flag for tracking updates so we don't clobber data when cancelling activation\n\n  let nullifier = 0;\n  /**\n   * Sets activating to true, indicating that an update is in progress.\n   *\n   * @returns cancelActivation - A function that cancels the activation by setting activating to false,\n   * as long as there haven't been any intervening updates.\n   */\n\n  function startActivation() {\n    const nullifierCached = ++nullifier;\n    store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), {\n      activating: true\n    })); // return a function that cancels the activation iff nothing else has happened\n\n    return () => {\n      if (nullifier === nullifierCached) store.setState({\n        activating: false\n      });\n    };\n  }\n  /**\n   * Used to report a `stateUpdate` which is merged with existing state. The first `stateUpdate` that results in chainId\n   * and accounts being set will also set activating to false, indicating a successful connection.\n   *\n   * @param stateUpdate - The state update to report.\n   */\n\n\n  function update(stateUpdate) {\n    // validate chainId statically, independent of existing state\n    if (stateUpdate.chainId !== undefined) {\n      validateChainId(stateUpdate.chainId);\n    } // validate accounts statically, independent of existing state\n\n\n    if (stateUpdate.accounts !== undefined) {\n      for (let i = 0; i < stateUpdate.accounts.length; i++) {\n        stateUpdate.accounts[i] = validateAccount(stateUpdate.accounts[i]);\n      }\n    }\n\n    nullifier++;\n    store.setState(existingState => {\n      var _a, _b; // determine the next chainId and accounts\n\n\n      const chainId = (_a = stateUpdate.chainId) !== null && _a !== void 0 ? _a : existingState.chainId;\n      const accounts = (_b = stateUpdate.accounts) !== null && _b !== void 0 ? _b : existingState.accounts; // ensure that the activating flag is cleared when appropriate\n\n      let activating = existingState.activating;\n\n      if (activating && chainId && accounts) {\n        activating = false;\n      }\n\n      return {\n        chainId,\n        accounts,\n        activating\n      };\n    });\n  }\n  /**\n   * Resets connector state back to the default state.\n   */\n\n\n  function resetState() {\n    nullifier++;\n    store.setState(DEFAULT_STATE);\n  }\n\n  return [store, {\n    startActivation,\n    update,\n    resetState\n  }];\n}\n\nexports.createWeb3ReactStoreAndActions = createWeb3ReactStoreAndActions;","map":{"version":3,"sources":["/Users/charvai/Personal/PROJECT/RAPID_INNOVATION/web3-react/packages/store/dist/index.js"],"names":["Object","defineProperty","exports","value","createWeb3ReactStoreAndActions","MAX_SAFE_CHAIN_ID","address_1","require","zustand_1","validateChainId","chainId","Number","isInteger","Error","validateAccount","account","getAddress","DEFAULT_STATE","undefined","accounts","activating","store","createStore","nullifier","startActivation","nullifierCached","setState","assign","update","stateUpdate","i","length","existingState","_a","_b","resetState"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWeb3ReactStoreAndActions = exports.MAX_SAFE_CHAIN_ID = void 0;\nconst address_1 = require(\"@ethersproject/address\");\nconst zustand_1 = require(\"zustand\");\n/**\n * MAX_SAFE_CHAIN_ID is the upper bound limit on what will be accepted for `chainId`\n * `MAX_SAFE_CHAIN_ID = floor( ( 2**53 - 39 ) / 2 ) = 4503599627370476`\n *\n * @see {@link https://github.com/MetaMask/metamask-extension/blob/b6673731e2367e119a5fee9a454dd40bd4968948/shared/constants/network.js#L31}\n */\nexports.MAX_SAFE_CHAIN_ID = 4503599627370476;\nfunction validateChainId(chainId) {\n    if (!Number.isInteger(chainId) || chainId <= 0 || chainId > exports.MAX_SAFE_CHAIN_ID) {\n        throw new Error(`Invalid chainId ${chainId}`);\n    }\n}\nfunction validateAccount(account) {\n    return (0, address_1.getAddress)(account);\n}\nconst DEFAULT_STATE = {\n    chainId: undefined,\n    accounts: undefined,\n    activating: false,\n};\nfunction createWeb3ReactStoreAndActions() {\n    const store = (0, zustand_1.createStore)()(() => DEFAULT_STATE);\n    // flag for tracking updates so we don't clobber data when cancelling activation\n    let nullifier = 0;\n    /**\n     * Sets activating to true, indicating that an update is in progress.\n     *\n     * @returns cancelActivation - A function that cancels the activation by setting activating to false,\n     * as long as there haven't been any intervening updates.\n     */\n    function startActivation() {\n        const nullifierCached = ++nullifier;\n        store.setState(Object.assign(Object.assign({}, DEFAULT_STATE), { activating: true }));\n        // return a function that cancels the activation iff nothing else has happened\n        return () => {\n            if (nullifier === nullifierCached)\n                store.setState({ activating: false });\n        };\n    }\n    /**\n     * Used to report a `stateUpdate` which is merged with existing state. The first `stateUpdate` that results in chainId\n     * and accounts being set will also set activating to false, indicating a successful connection.\n     *\n     * @param stateUpdate - The state update to report.\n     */\n    function update(stateUpdate) {\n        // validate chainId statically, independent of existing state\n        if (stateUpdate.chainId !== undefined) {\n            validateChainId(stateUpdate.chainId);\n        }\n        // validate accounts statically, independent of existing state\n        if (stateUpdate.accounts !== undefined) {\n            for (let i = 0; i < stateUpdate.accounts.length; i++) {\n                stateUpdate.accounts[i] = validateAccount(stateUpdate.accounts[i]);\n            }\n        }\n        nullifier++;\n        store.setState((existingState) => {\n            var _a, _b;\n            // determine the next chainId and accounts\n            const chainId = (_a = stateUpdate.chainId) !== null && _a !== void 0 ? _a : existingState.chainId;\n            const accounts = (_b = stateUpdate.accounts) !== null && _b !== void 0 ? _b : existingState.accounts;\n            // ensure that the activating flag is cleared when appropriate\n            let activating = existingState.activating;\n            if (activating && chainId && accounts) {\n                activating = false;\n            }\n            return { chainId, accounts, activating };\n        });\n    }\n    /**\n     * Resets connector state back to the default state.\n     */\n    function resetState() {\n        nullifier++;\n        store.setState(DEFAULT_STATE);\n    }\n    return [store, { startActivation, update, resetState }];\n}\nexports.createWeb3ReactStoreAndActions = createWeb3ReactStoreAndActions;\n"]},"metadata":{},"sourceType":"script"}